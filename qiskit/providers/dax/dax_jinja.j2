"""
Program generated on {{date_time}} by QisDax v{{qisdax_version}}.
"""

from dax.program import *


class QisDaxProgram(DaxProgram, Experiment):

    def build(self):
        self._num_iterations = {{shots}}
        self._num_qubits = {{qubits}}
        self.update_kernel_invariants('_num_iterations', '_num_qubits')
        self._classical_regs = set()

    def run(self):
        # Check number of qubits
        if self._num_qubits > self.q.num_qubits:
            raise RuntimeError('Circuit requires more qubits than the system supports')

        # Run the kernel
        self._run()

    @kernel
    def _run(self):
        self._qiskit_kernel()

        self.core.wait_until_mu(now_mu())

    @kernel
    def _qiskit_kernel(self):
        with self.data_context:
            for _ in range(self._num_iterations):
                self.core.reset()
                self.q.prep_0_all()

                {% for inst in instructions_list -%}
                {{inst}}
                {% endfor %}

    @rpc(flags='async')
    def _store_measurements(self, classical_reg, measurements):
        if classical_reg in self._classical_regs:
            self.append_to_dataset(classical_reg, measurements)
        else:
            self._classical_regs.add(classical_reg)
            self.set_dataset(classical_reg, [measurements])
